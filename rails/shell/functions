#!/bin/sh

rails_initialize()
{
  log_path="${shared_path}/log" # For backup_database
  export log_path shared_path

  if [[ "$action" != "help" ]] && user is root
  then # Sanity check
    error "Can not work as root with rails extension."
  fi

  true ${project_root:="$HOME"}

  scm_flags=()
}

rails_usage()
{
  log "
CLI Arguments:

  -r|--repository  - The URL for the project repository code.

  -E|--environment - The environment (eg. production,staging,etc...)

  -p|--project     - The project name, defaults to current user name

  -D|--database)   - Database name

  -s|--server      - Application server (eg. unicorn, thin, etc...)

  --help           - This help text

  --licence        - Display extension license
"
}

ralis_cli()
{
  number_of_args=${#extension_args[@]}

  for ((index=0 ; index < $number_of_args ; index++))
  do
    token="${extension_args[$index]}"

    case "$token" in
      -r|--repo|--repository)
        repository_url="${extension_args[$((++index))]}"
        ;;
      -E|--environment|--env)
        environment="${extension_args[$((++index))]}"
        ;;
      -p|--project)
        project="${extension_args[$((++index))]}"
        ;;
      -D|--database|--db)
        database="${extension_args[$((++index))]}"
        ;;
      -s|--server)
        server="${extension_args[$((++index))]}"
        ;;
      --scm-flag|-F)
        scm_flags+=("${extension_args[$((++index))]}")
        ;;
      --help|-h)
        rails_usage
        exit 0
        ;;
      --licence)
        display_extension_licence
        exit 0
        ;;
    esac
  done

  rails_initialize
}


configure_database_yml()
{
  if [[ ! -s "$shared_path/config/database.yml" ]]
  then
    true "${database:=postgresql}"
    files write \
      string "\n${environment}: &defaults\n  adapter: ${database}\n  username: $project\n  password: '$project'\n  database: ${project}_${environment}\n  pool: 5\n  timeout: 5000" \
      to "$shared_path/config/database.yml"

    if [[ "$database" == "mysql" ]]
    then
      files write \
        string "  socket: ${socket:-/tmp/mysql.sock}\n  encoding: utf8\n" \
        append to "$shared_path/config/database.yml"
    fi
  fi

  if [[ -n "${database}" ]] && command exists gem
  then
    case "$database" in
      postgresql)
        install_gems pg
        if [[ "$?" -ne 0 ]] ; then
          pg_config=$(command -v pg_config)
          install_gem pg -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
          # gem install pg --no-rdoc --no-ri -- --with-pg-config=${pg_config:-/usr/local/postgresql/bin/pg_config}
        fi
        ;;

      mysql)
        install_gems mysql
        if [[ "$?" -ne 0 ]] ; then
          mysql_config=$(command -v mysql_config)
          install_gem mysql -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
          #gem install mysql --no-rdoc --no-ri -- --with-mysql-config=${mysql_config:-/usr/local/mysql/bin/mysql_config}
        fi
        ;;

      mongodb)
        install_gems mongomapper
        ;;

      riak)
        true # This would be cool eh?
        ;;

      sqlite*|*)
        install_gems sqlite3
        ;;
    esac
  fi
}

configure_profiles()
{
  # Ensure the .smrc file and the profiles are setup properly.
  files exist "$HOME/.bashrc" "$HOME/.bash_profile" || error "No profile files found"

  files contain string '\.smrc' in "$HOME/.bashrc" ||
    files write \
      string '[[ -s "$HOME/.smrc" ]] && . "$HOME/.smrc"' \
      to "$HOME/.bashrc"

  files contain string '\.bashrc' in "$HOME/.bash_profile" ||
    files write  \
      string '[[ "-s $HOME/.bashrc" ]] && . "$HOME/.bashrc"' \
      to "$HOME/.bash_profile"

  files contain string '\.rvmrc' in "$HOME/.bash_profile" ||
    files write \
      string '[[ -s "$HOME/current/.rvmrc" ]] && . "$HOME/current/.rvmrc"' \
      to "$HOME/.bash_profile"
}

configure_smrc()
{ # TODO: Separate project specific vs rails specific env vars into project module.

  [[ -n "${project}" ]] || error "project variable is not set, please run 'sm smrc' and edit '~/.smrc'."

  # TODO: These variables should be read & set via the defaults module.
  local _config="${HOME}/.smrc"

  files exists "${_config}" ||
    error ".smrc file does not exist, run following command to generate it:\n\n sm smrc\n"

  files contain string 'project=' in "${_config}" ||
    fiels write \
      string "\nexport project=\"${project:-$user}\"" \
      append to ${_config}

  [[ -n "${environment}" ]] || error "environment variable is not set, please run 'sm smrc' and edit '~/.smrc'."

  files contain string 'environment=' in "${_config}" ||
    fiels write \
      string "\nexport environment=\"$environment\"" \
      append to ${_config}

  files contain string 'RAILS_ENV=' in "${_config}" ||
    files write \
      string "\nexport RAILS_ENV=\"$environment\"" \
      append to ${_config}

  if [[ -n "${repository_url}" ]] &&
    ! files contain string "repository_url=" in "${_config}"
  then
    files write \
      string "\nexport repository_url=\"$repository_url\"" \
      append to "${_config}"
  fi

  if [[ -n "${database}" ]] &&
    ! files contain string 'database=' in "${_config}"
  then
    fiels write \
      string "export database=\"${database}\"" \
      append to "${_config}"
  fi
}

setup_shared_path()
{
  local _path

  for _path in config log pids sockets "public/assets" tmp
  do
    log step "Ensuring path exists ~ ${shared_path}/${_path}" \
      paths create  "${shared_path}/${_path}"
  done
}

configure_rvm()
{
  if [[ ! -s "${HOME}/.rvm/scripts/rvm" ]]
  then
    if [[ ! -s "${HOME}/.rvmrc" ]] ||
      ! files contain string 'rvm_path=' in "$HOME/.rvmrc"
    then
      files write \
        string 'export rvm_path="${HOME}/.rvm"' \
        append to "${HOME}/.rvmrc"
    fi

    if ! files contain string 'rvm_install_on_use_flag' in "$HOME/.rvmrc"
    then
      fiels write \
        string 'export rvm_install_on_use_flag=1' \
        append to "$HOME/.rvmrc"
    fi

    if ! files contain string 'rvm_gems_path' in "$HOME/.rvmrc"
    then
      files write \
        string 'export rvm_gems_path="$HOME/.rvm/gems"' \
        append to "$HOME/.rvmrc"
    fi

    rvm_install
  fi

  [[ -f "$HOME/.bash_profile" ]] || touch "$HOME/.bash_profile"

  if [[ ! -s "$shared_path/$project/.rvmrc" ]]
  then
    (
      files source \
        "$HOME/.rvm/scripts/rvm" "$HOME/.rvmrc" "$shared_path/$project/.rvmrc"
    )
  else # Default to 1.9.2 for now
    (
      files source \
        "$HOME/.rvm/scripts/rvm" "$HOME/.rvmrc"
      export rvm_install_on_use_flag=1
      rvm ruby --default
    )
  fi

  if ! files contain string "scripts/rvm" in "$HOME/.bash_profile"
  then
    files write \
      string "[[ -s \"${rvm_path:-"$HOME/.rvm"}/scripts/rvm\" ]] && . \"${rvm_path:-"$HOME/.rvm"}/scripts/rvm\"  # Load RVM into a shell session *as a function*" \
      append to "${HOME}/.bash_profile"
  fi
}

setup_application_server()
{
  case "${server:-}" in
    unicorn)
      # TODO: Extension check
      modules unicorn
      unicorn_setup
      ;;
    mongrel2)
      NIY "mongrel2 is not implemented yet for the rails extension."
      modules mongrel2
      mongrel2_setup
      ;;
    thin)
      modules thin
      setup
      ;;
    passenger) # Standalone
      NIY "passenger is not implemented yet for the rails extension."
      modules passenger
      passenger_setup
      ;;
    *)
      # Default to Unicorn
      modules unicorn
      unicorn_setup
      ;;
  esac
}

bootstrap_gems()
{
  true ${bundle_args:=()}
  (
    . "${HOME}/.rvm/scripts/rvm"

    command exists "gem" || return 0

    paths enter "${release_path}"

    if files exists "Gemfile"
    then
      command exists bundle || gem install bundler --no-rdoc --no-ri

      bundle ${bundle_args[@]}
    else
      error "'gem' command not found, not installing bundler."
    fi
  )
}

rails_setup()
{
  log step "Configuring ~/.smrc" \
    configure_smrc

  log step "Configuring profiles (~/.rvmrc, ~/.bashrc ~/.bash_profile)" \
    configure_profiles

  [[ -n "shared_path" ]] || error "shared_path not set"

  paths create "${shared_path}"

  paths enter "${shared_path}"

  log step "Setting up shared path (~/shared)"
  setup_shared_path

  log step "Configuring database.yml (~/shared/config/database.yml)" \
    configure_database_yml

  paths exists "$shared_path/$project" ||
    fetch_uri "$repository_url" "$shared_path/$project" ${scm_flags[@]}

  configure_rvm

  setup_application_server

  modules deploy

  bootstrap_gems
}

rails_server()
{
  paths enter "${release_path}"

  if command exists "ruby"
  then
    if [[ -s "script/${action}" ]]
    then
      $ruby script/${action}

    elif [[ -s "script/rails" ]]
    then
      $ruby script/rails ${action}
    fi
  else
    error "A default ruby does not seem to be set, cannot run ${action}"
  fi
}

rails_dbconsole()
{
  paths enter "${release_path}"

  if command exists "ruby"
  then
    if [[ -s "script/${action}" ]]
    then
      ruby script/${action}
    elif [[ -s "script/rails" ]]
    then
      ruby script/rails ${action}
    elif command exists rails
    then
      rails ${action}
    else
      true # TODO: raw psql/mysql/etc... based on database.yml
    fi
  else
    error "'ruby' does not exist in the path, cannot run ${action}"
  fi
}

rails_console()
{
  paths enter "${release_path}"

  if command exists ruby
  then
    if [[ -s "script/${action}" ]]
    then
      ruby script/${action}
    elif [[ -s "script/rails" ]]
    then
      ruby script/rails ${action}
    elif command exists rails
    then
      rails ${action}
    fi
  else
    error "'ruby' does not exist in the path, cannot run ${action}"
  fi
}

rails_logtail()
{
  exec tail -f "${shared_path}/log/*.log"
}

rails_migrate()
{
  paths enter "${release_path}"

  if ! command exists rake
  then
    install_gems rake
  fi

  rake db:migrate --trace
}

rails_new()
{
  if command exists "ruby"
  then
    if [[ -s "script/${action}" ]]
    then
      ruby script/${action}

    elif [[ -s "script/rails" ]]
    then
      ruby script/rails ${action}

    elif command exists rails
    then
      rails ${action}
    fi
  else
    error "'ruby' does not exist in the path, cannot run ${action}"
  fi
}

rails_generate()
{
  paths enter "${release_path}"

  if command exists "ruby"
  then
    if [[ -s "script/${action}" ]]
    then
      ruby script/${action}
    elif [[ -s "script/rails" ]]
    then
      ruby script/rails ${action}
    elif command exists rails
    then
      rails ${action}
    fi
  else
    error "'ruby' does not exist in the path, cannot run ${action}"
  fi
}

rails_bootstrap()
{
  paths enter "${release_path}"

  if [[ -s *.gems ]] && command exists "rvm"
  then
    rvm gemset import *.gems
  fi

  if [[ -s "Gemfile" ]]
  then
    if ! command exists bundle
    then
      install_gems bundler
    fi
  elif files contain string "config.gem" in "config/environment.rb"
  then
    rake gems:install
  else
    log "No Gemfile or config.gem entries detected, skipping gems."
  fi

  if ! command exists rake
  then
    install_gems rake 0.8.7
  fi

  if command exists rake
  then
    rake db:create
    rake db:migrate
  else
    warn "'rake' command is missing, skipping db:create and db:migrate tasks."
  fi
}

rails_install()
{
  paths enter "${release_path}"

  if ! command exists rails
  then
    install_gems rails
  fi
}

install_gem()
{
  gem install --no-rdoc --no-ri -q "$@"
}

install_gems() {
  local _gem _gems=("$@") _result=0

  (( ${#_gems[@]} > 0 )) ||
    fail "Cannot install gems, as no gem names were given!"

  for _gem in "${_gems[@]}"
  do
    install_gem ${_gem} || (( _result++ ))
  done

  return $_result
}

rvm_install()
{
  local _version=${1:-latest} _result=0 url

  files source "/etc/rvmrc" "$HOME/.rvmrc"

  rvm_files=(
    "$rvm_path/scripts/rvm"
    "$HOME/.rvm/scripts/rvm"
    "/usr/local/rvm/scripts/rvm"
  )

  local _files=( $(files nonempty "${rvm_files[@]}") )

  [[ -z "${_files}" ]]  || files source ${files}

  if ! command is function rvm
  then
    url="https://rvm.beginrescueend.com/install/rvm"
    curl -L -sk "$url" -o rvm-installer
    chmod +x "rvm-installer"
    ./rvm-installer --version ${_version}
    files remove "rvm-installer"
  fi
}
