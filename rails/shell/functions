#!/bin/sh

rails_initialize()
{
  log_path="${shared_path}/log" # For backup_database

  if [[ "$action" != "help" ]] && user is root
  then # Sanity check
    log error "Can not work as root with rails extension."
  fi

  true ${project_root:="$HOME"}

  scm_flags=()
}

rails_usage()
{
  log "
CLI Arguments:

  -r|--repository  - The URL for the project repository code.

  -E|--environment - The environment (eg. production,staging,etc...)

  -p|--project     - The project name, defaults to current user name

  -D|--database)   - Database name

  -s|--server      - Application server (eg. unicorn, thin, etc...)

  --help           - This help text

  --licence        - Display extension license
"
}

rails_cli()
{
  local number_of_args

  number_of_args=${#extension_args[@]}

  for (( index=0 ; index < $number_of_args ; index++ ))
  do
    token="${extension_args[$index]}"

    case "$token" in
      (-r|--repo|--repository)
        repository_url="${extension_args[$((++index))]}"
        ;;
      (-E|--environment|--env)
        environment="${extension_args[$((++index))]}"
        ;;
      (-p|--project)
        project="${extension_args[$((++index))]}"
        ;;
      (-D|--database|--db)
        database="${extension_args[$((++index))]}"
        ;;
      (-s|--server)
        server="${extension_args[$((++index))]}"
        ;;
      (--scm-flag|-F)
        scm_flags+=("${extension_args[$((++index))]}")
        ;;
      (--ruby)
        ruby_string="${extension_args[$((++index))]}"
        ;;
      (--help|-h)
        rails_usage
        exit 0
        ;;
      (--licence)
        display_extension_licence
        exit 0
        ;;
    esac
  done

  rails_initialize
}

setup_application_server()
{
  case "${server:-}" in
    (unicorn)
      # TODO: Extension check
      includes unicorn
      unicorn_setup
      ;;
    (mongrel2)
      NIY "mongrel2 is not implemented yet for the rails extension."
      includes mongrel2
      mongrel2_setup
      ;;
    (thin)
      includes thin
      setup
      ;;
    (passenger) # Standalone
      NIY "passenger is not implemented yet for the rails extension."
      includes passenger
      passenger_setup
      ;;
    (*)
      # Default to Unicorn
      includes unicorn
      unicorn_setup
      ;;
  esac
}

bootstrap_gems()
{
  true ${bundle_args:=()}
  (
    source "$HOME/.env"

    command exists "gem" || return 0

    path enter "${release_path}"

    if file exists "Gemfile"
    then
      command exists bundle || gem install bundler --no-rdoc --no-ri

      bundle install --binstubs --without development test ${bundle_args[@]}
    else
      log error "'gem' command not found, not installing bundler."
    fi
  )
}

install_gem()
{
  gem install --no-rdoc --no-ri -q "$@"
}

install_gems() {
  local _gem _gems=("$@") _result=0

  if (( ${#_gems[@]} < 1 ))
  then
    log fail "Cannot install gems, as no gem names were given!"
  fi

  for _gem in "${_gems[@]}"
  do install_gem ${_gem} || (( _result++ )) ; done

  return $_result
}

