#!/bin/sh

typeset -g running_pid old_pid master_pid pid_file pid_file_pid environment \
  project >/dev/null 2>&1

unicorn_initialize()
{
  local pid_file

  variables must be nonempty \
    environment project \
    type error

  pid_file="$shared_path/pids/$project.pid"
  service_pid_file="${pid_file}" # Needed for unicorn_status

  true ${pid_file_pid:=0} ${running_pid:=0} ${master_pid:=0}

  if files are nonempty "$pid_file"
  then
    read -r pid_file_pid < "${pid_file}"
  fi

  set_master_pid

  load_ruby_environment

  if paths exists "$release_path"
  then
    paths enter "${release_path}"
    # Since enter will not trigger project rvmrc files,
    files source "$release_path/.rvmrc" "$HOME/.rvm/hooks/after_cd" || true
  fi

  service_log_file="${shared_path}/log/unicorn.log"
}


unicorn_usage() {
  printf "
  Usage:

    $0 [options]

  options:

    --prefix   - specify prefix path
    --src)     - specify source directory
    --data)    - specify data directory
    --user)    - specify user to install as
    --version) - specify version to install
    --licence) - view licence
    --help)    - view this usage information

"
  return 0
}

unicorn_cli()
{
  local number_of_args
  number_of_args=${#extension_args[@]}

  for ((index=0 ; index < $number_of_args ; index++)) ; do

    token="${extension_args[$index]}"

    case "$token" in
      --version)
        package_version="${extension_args[$((++index))]}"
        ;;
      --licence)
        display_extension_licence
        exit 0
        ;;
      --help|-h)
        unicorn_usage
        exit 0
        ;;
      *)
        true # Ignore?
        ;;
    esac
  done

  unicorn_initialize
}

set_master_pid()
{
  # Fetch the running pid.
  if variables are nonempty project
  then
    running_pid=$( ps auxww |
    awk "/[u]nicorn master/ && ! /(old)/ && /\/${project}\// {print \$2}"
    )

    old_pid=$( ps auxww |
    awk "/[u]nicorn master/ && /(old)/ && /\/${project}\// {print \$2}"
    )
  else
    running_pid=$( ps auxww |
    awk "/[u]nicorn master/ && ! /(old)/ && /\/${USER}\// {print \$2}"
    )
    old_pid=$( ps auxww |
    awk "/[u]nicorn master/ && /(old)/ && /\/${USER}\// {print \$2}"
    )

    log "WARNING: 'project' should be set in ~/.smrc"
  fi

  if (( running_pid > 0 ))
  then
    echo ${running_pid} > "$pid_file" # Make sure the correct running pid is in the pid_file.
    master_pid=${running_pid} # Set to the found running pid_file.

  elif (( pid_file_pid > 0 ))
  then
    master_pid=${pid_file_pid} # Running and matches pid_file.
  fi

  if os is linux && [[ ! -d "/proc/${master_pid}" ]]
  then # Ensure that the proc exists, otherwise reset master_pid.
    master_pid=0
  fi
}

unicorn_setup()
{
  if templates exist "unicorn/unicorn.rb"
  then
    paths create "$shared_path/config"

    templates install "unicorn/unicorn.rb" to "${shared_path}/config/"

    succeed "Setup complete."
  else
    log fail "Template file $extensions_path/unicorn/templates/unicorn.rb.template is missing."
  fi
}

unicorn_start()
{
  local binary

  if (( master_pid > 0 ))
  then
    succeed "Unicorn herd master is already running for $project."
  fi

  log "Starting unicorn herd master for $project."

  if files are empty "$release_path/config/unicorn.rb"
  then
    log fail "config/unicorn.rb not found, aborting start."
  fi

  if files are nonempty "$release_path/config.ru"
  then
    binary="unicorn"
  else
    binary="unicorn_rails"
  fi

  echo ${binary:-unicorn} -c "$release_path/config/unicorn.rb" -E "$environment" -D

  if ${binary:-unicorn} -c "$release_path/config/unicorn.rb" -E "$environment" -D
  then
    succeed "Unicorn herd master has been launched $project."
  else
    log "Unicorn herd master failed to start, check ${service_log_file}, last 50:"
    tail -n 50 "${service_log_file}"
    log error ""
  fi
}

unicorn_stop()
{
  if (( master_pid > 0 ))
  then
    log "Signaling unicorn master to quit for $project."

    service signal QUIT ${master_pid}
  else
    succeed "Unicorn herd is not running for $project yet."
  fi
}

unicorn_restart()
{
  local binary

  if (( master_pid <= 0 ))
  then
    log "Unicorn herd master not found running for $project $environment, starting."

    if files are nonempty "$release_path/config/unicorn.rb"
    then
      if files are nonempty "$release_path/config.ru"
      then
        ${binary:-unicorn} \
          -c "$release_path/config/unicorn.rb" \
          -E "$environment" \
          -D
      else
        binary="unicorn_rails"
      fi
    else
      log fail "config/unicorn.rb not found, aborting start."
    fi
  else
    log "Master pid '$master_pid' found."

    log "Signaling herd master '$master_pid' for $project $environment to re-execute the running binary."

    service signal USR2 ${master_pid}

    log "Signaled unicorn master '$master_pid' for $project $environment, it should restart within a few seconds. As requests finish processing workers will be replaced."
  fi
}

unicorn_terminate()
{
  if (( master_pid > 0 ))
  then
    service signal TERM ${master_pid}
  else
    succeed "unicorn is not running for $project."
  fi
}

unicorn_increase()
{
  if (( master_pid > 0 ))
  then
    service signal TTIN ${master_pid}
  else
    log fail "unicorn is not running for $project yet."
  fi
}

unicorn_decrease()
{
  if (( master_pid > 0 ))
  then
    service signal TTOU ${master_pid}
  else
    log fail "unicorn is not running for $project."
  fi
}

unicorn_pause()
{
  if (( master_pid > 0 ))
  then
    paths enter "${release_path}"
    service signal WINCH ${master_pid}
  else
    succeed "Unicorn is not running for $project yet."
  fi
}

unicorn_unpause()
{
  unicorn_pause
}

unicorn_reopen_logs()
{
  if (( master_pid > 0 ))
  then
    service signal USR1 ${master_pid}
  else
    succeed "unicorn is not running for $project yet."
  fi
}

unicorn_list()
{
  if (( master_pid > 0 ))
  then
    # TODO: Use service_list
    if variables are nonempty project
    then
      ps auxww | awk "/[u]nicorn/ && /master/ && /\/${project}\//"
      ps auxww | awk "/[u]nicorn/ && /worker/ && /\/${project}\//"
    else
      ps auxww | awk "/[u]nicorn/ && /master/ && /\/${USER}\//"
      ps auxww | awk "/[u]nicorn/ && /worker/ && /\/${USER}\//"
    fi
  else
    succeed "There are no unicorns running for $project."
  fi
}

unicorn_install()
{
  #TODO: extract that one from sm/sm-ruby/rails
  # install_gems unicorn
  gem install unicorn --no-rdoc --no-ri -q
}

load_ruby_environment()
{
  if files exists "$HOME/.rvm/environments/default"
  then
    files source "$HOME/.rvm/environments/default"

  elif files exists "/usr/local/rvm/environments/default"
  then
    files source "/usr/local/rvm/environments/default"
  fi
}
